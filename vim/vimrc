set nocompatible
filetype off

" Load Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ==================================
" The Vundle plugin manager
" ==================================
Plugin 'VundleVim/Vundle.vim'

" ==================================
" File browser tree
" ==================================
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
nnoremap <silent> <Leader>0 :NERDTreeToggle<CR>
" Close VIM if the only window left is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ==================================
" A pack of color schemes
" ==================================
Plugin 'daviddavis/vim-colorpack'

" ==================================
" Easily comment lines
" ==================================
Plugin 'scrooloose/nerdcommenter'

" ==================================
" Close a sinlge buffer without closing the window
" ==================================
Plugin 'Soares/butane.vim'
nnoremap <leader>q :Bclose<CR>

" ==================================
" Fancy status bar
" ==================================
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme='wombat'

" ==================================
" Tabularize the selected text using '=' as a separator
" ==================================
Plugin 'godlygeek/tabular'

" ==================================
" Adds some additional utilities and functionality for developing VIM
" ==================================
Plugin 'L9'

" ==================================
" Adds tab view that is showing the methods and fields of the opened class.
" ==================================
Plugin 'majutsushi/tagbar'
nnoremap <silent> <Leader>9 :TagbarToggle<CR>

" ==================================
" JS support
" ==================================
Plugin 'pangloss/vim-javascript'
Plugin 'leshill/vim-json'
Plugin 'MaxMEllon/vim-jsx-pretty'
Plugin 'othree/javascript-libraries-syntax.vim'
let g:javascript_enable_domhtmlcss=1
let g:javascript_enable_domhtmlcss = 1
let g:javascript_ignore_javaScriptdoc = 1
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:used_javascript_libs = 'angularjs,jquery,requirejs'
autocmd BufEnter *.js set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.ts set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.json set tw=79 sw=3 ts=3 sta et fo=croql

" ==================================
" A bunch of snippets (engine)
" ==================================
if v:version > 740
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"
endif

" ==================================
" Adds external support for linters.
" ==================================
if v:version >= 800
    " Async
    Plugin 'w0rp/ale'
    let g:ale_open_list=1
    nnoremap <leader>ll :ALEEnable<CR>
    nnoremap <leader>ln :ALENext<CR>
    nnoremap <leader>lp :ALEPrevious<CR>
    nnoremap <leader>lr :ALEDisable<CR>
else
    Plugin 'scrooloose/syntastic'
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_mode_map={ "mode": "passive" }
    let g:sytastic_enable_highlighting=1
    let g:syntastic_javascript_checkers = ['jshint']
    nnoremap <leader>ll :SyntasticCheck<CR>
    nnoremap <leader>ln :lnext<CR>
    nnoremap <leader>lp :lprevious<CR>
    nnoremap <leader>lr :SyntasticReset<CR>
endif

" ==================================
" Support for other file types
" ==================================
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'othree/html5-syntax.vim'
Plugin 'othree/html5.vim'
Plugin 'groenewege/vim-less'
Plugin 'leafgarland/typescript-vim'
Plugin 'othree/csscomplete.vim'
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
autocmd FileType less set omnifunc=csscomplete#CompleteCSS
Plugin 'vim-python/python-syntax'
let python_highlight_all = 1

" ==================================
" Highlight the matching tag
" ==================================
Plugin 'gregsexton/MatchTag'

" ==================================
" UNIX file modification operations
" ==================================
Plugin 'tpope/vim-eunuch'

" ==================================
" Manage marks
" ==================================
Plugin 'kshenoy/vim-signature'

" ==================================
" Surround actions
" ==================================
Plugin 'tpope/vim-surround'

" ==================================
" Git support - adds sign infront of the file line indication if the text was
" added/remove/edited
" ==================================
Plugin 'airblade/vim-gitgutter'

" ==================================
" Support for GUI color schemes in the non-gui environments
" ==================================
Plugin 'godlygeek/csapprox'

" ==================================
" Highlights and strips the trailing whitespaces
" ==================================
Plugin 'ntpeters/vim-better-whitespace'

" ==================================
" Easy navigate through the current file
" ==================================
Plugin 'easymotion/vim-easymotion'

" ==================================
" Shows the VIM's undo tree (history)
" ==================================
Plugin 'mbbill/undotree'
nnoremap <Leader>5 :UndotreeToggle<cr>

" ==================================
" Allows method parameters, array elements, etc. to be moved left or right
" ==================================
Plugin 'AndrewRadev/sideways.vim'
nnoremap <Leader>sl :SidewaysLeft<CR>
nnoremap <Leader>sr :SidewaysRight<CR>

" ==================================
" Python IDE-like features
" ==================================
Plugin 'davidhalter/jedi-vim'
let g:jedi#goto_command = "<leader>dc"
let g:jedi#goto_assignments_command = "<leader>da"
let g:jedi#goto_definitions_command = "<leader>df"
let g:jedi#documentation_command = "<leader>kk"
let g:jedi#usages_command = "<leader>rf"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>rn"

" ==================================
" Autocompletion with TAB
" ==================================
Plugin 'ervandew/supertab'

" ==================================
" Highlith XML/HTML opening or closing tag
" ==================================
Plugin 'jiangmiao/auto-pairs'

" ==================================
" Perforce integration plugin
" ==================================
Plugin 'nfvs/vim-perforce'

" ==================================
" FZF support
" ==================================
if executable('fzf')
    Plugin 'junegunn/fzf.vim'
    if has("win32")
        " Windows
    elseif has("unix")
        let s:uname = system("uname")
        if s:uname == "Darwin\n"
            " Mac OSX
            set rtp+=/usr/local/opt/fzf
        else
            " Linux
            " TODO Needs to be updated after every FZF update
            set rtp+=~/.linuxbrew/Cellar/fzf/0.20.0
        endif
    endif

    nnoremap <c-p><c-p> :FZF<CR>
    nnoremap <c-p><c-e> :Buffers<CR>

    nmap <leader><tab> <plug>(fzf-maps-n)
    xmap <leader><tab> <plug>(fzf-maps-x)
    omap <leader><tab> <plug>(fzf-maps-o)

    " Insert mode completion
    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-j> <plug>(fzf-complete-file-ag)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    " Advanced customization using Vim function
    inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
else
    Plugin 'ctrlpvim/ctrlp.vim'
    let g:ctrlp_map = '<c-p><c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_working_path_mode = 0
    if has("win32")
        set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*
        set wildignore+=*\\node_modules\\*
    else
        set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
        set wildignore+=*/node_modules/*
    endif

    nnoremap <c-p><c-e> :CtrlPBuffer<CR>
endif

" ==================================
" Dash support
" ==================================
if has("win32")
    " Windows
    Plugin 'KabbAmine/zeavim.vim'
    nnoremap <leader>dd :Zeavim<CR>
    vnoremap <leader>dd :Zeavim<CR>
elseif has("unix")
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        " Mac OSX
        Plugin 'rizzatti/dash.vim'
        nnoremap <leader>dd :Dash<CR>
    else
        Plugin 'KabbAmine/zeavim.vim'
        nnoremap <leader>dd :Zeavim<CR>
        vnoremap <leader>dd :Zeavim<CR>
    endif
endif

call vundle#end()
filetype plugin indent on

" ==================================
" ===     Configure behavior     ===
" ==================================

syntax on

set synmaxcol=200
set autoindent
set copyindent
set smartindent
set backup
set writebackup
set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab
set incsearch
set hlsearch
set cursorline
set encoding=utf8
set t_Co=256
set fileencoding=utf-8
set wildchar=<Tab>
set wildmenu
set wildmode=list:full
set ignorecase
set smartcase
set smarttab
set ff=unix
set scrolloff=4
set showcmd
set showmode
set hidden
set ruler
set laststatus=2
set undofile
set title
set dir=~/.vim/sessions//
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
set nowrap
set showmatch
set list                                                        " Show invisibles (tabs, line endings etc.)
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:.,extends:❯,precedes:❮ " Choose symbols to show invisibles
set showbreak=↪                                                 " Show line breaks
set lazyredraw                                                  " Don’t refresh while executing a macro
set history=1000                                                " remember more commands and search history
set undolevels=1000                                             " use many muchos levels of undo
set noerrorbells                                                " Don't blink on error
set visualbell t_vb=                                            " Don't beep on error
set relativenumber
set number
set foldcolumn=1                                                " show an additional column for fold indicator
set timeoutlen=500
set background=dark
colo jellybeans
set splitbelow
set splitright

" Load and Save the configuration file
nnoremap <silent> <Leader>lv :e $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :so $MYVIMRC<CR>

" Toggle folded text
nnoremap <silent> <S-space> za

" Toggle folded text and clear search result highlight
nnoremap <silent> <space> :noh<CR>

" New line
inoremap <S-Enter> <Esc>o
inoremap <C-Enter> <Esc>O

" ==================================
" File types mapping
" ==================================
autocmd BufEnter *.xml set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.html set tw=79 sw=4 ts=4 sta et fo=croql
autocmd FileType python setlocal completeopt-=preview
autocmd BufEnter *.py set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.sc set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.sc setlocal filetype=python
autocmd BufNewFile,BufRead *.less set filetype=less
autocmd BufEnter *.css set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.scss set tw=79 sw=4 ts=4 sta et fo=croql

" ==================================
" Clipboard management
" ==================================
noremap <Leader>y "+y
noremap <Leader>p "+p
noremap <Leader>P "+P
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P
inoremap <Leader>p <C-r>+
inoremap <Leader>P <C-r>+

" ==================================
" If "ag" is installed use it instead of "grep"
" ==================================
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " bind K to grep word under cursor
    nnoremap KK :grep "\b<C-R><C-W>\b"<CR>:cw<CR>
endif

" ==================================
" Navigation
" ==================================

" Scrolling in Insert mode
inoremap <C-E> <C-X><C-E>
inoremap <C-Y> <C-X><C-Y>

" Easier moving to start/end line
nnoremap <leader>a ^
nnoremap <leader>e $
vnoremap <leader>a ^
vnoremap <leader>e $<Left>

" Ignore arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
cnoremap <up> <nop>
cnoremap <down> <nop>
cnoremap <left> <nop>
cnoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>

" Navigate in command mode
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-d> <Del>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

" Move display lines instead of real lines
nnoremap k  gk
nnoremap gk k
nnoremap j  gj
nnoremap gj j

" Run ctags
nnoremap <silent> <leader>rc :!ctags -R .<CR>

" Toggle the paste option
set pastetoggle=<f5>

" Show font selector dialog
if has("gui_running")
    nnoremap <f8> :set guifont=*<CR>
endif
