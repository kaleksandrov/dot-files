" ==================================
" ===          Plugins           ===
" ==================================

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" This is a VIM plugin package manager
Plugin 'VundleVim/Vundle.vim'

" File browser tree. Like Navigator in Eclipse.
Plugin 'scrooloose/nerdtree'

" A pack of color schemes
Plugin 'daviddavis/vim-colorpack'

" Easily comment lines
Plugin 'scrooloose/nerdcommenter'

" Close a sinlge buffer without closing the window
Plugin 'Soares/butane.vim'

" Fancy status bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Tabularize the selected text using '=' as a separator
Plugin 'godlygeek/tabular'

" Adds some additional utilities and functionality for developing VIM
Plugin 'L9'

" Adds tab view that is showing the methods and fields of the opened class. The same as Outline in Eclipse.
Plugin 'majutsushi/tagbar'

" Support for ActionScript
Plugin 'actionscript'

" Support for JavaScript
Plugin 'pangloss/vim-javascript'

" Highlight some JavaScript libraries
Plugin 'othree/javascript-libraries-syntax.vim'

" Fuzzy file/buffer finder
Plugin 'ctrlpvim/ctrlp.vim'

" A bunch of snippets (engine)
if v:version > 740
    Plugin 'SirVer/ultisnips'
else
    Plugin 'MarcWeber/vim-addon-mw-utils'
    Plugin 'tomtom/tlib_vim'
    Plugin 'garbas/vim-snipmate'
endif

" Adds external support for linters.
if v:version >= 800
    " Async
    Plugin 'w0rp/ale'
else
    Plugin 'scrooloose/syntastic'
endif

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Support for docker files
Plugin 'ekalinin/Dockerfile.vim'

" HTML5 support
Plugin 'othree/html5-syntax.vim'
Plugin 'othree/html5.vim'

" LESS support
Plugin 'groenewege/vim-less'

" Highlight the matching tag
Plugin 'gregsexton/MatchTag'

" UNIX file modification operations
Plugin 'tpope/vim-eunuch'

" Support for typescript
Plugin 'leafgarland/typescript-vim'

" Update the CSS completion with latest standards
Plugin 'othree/csscomplete.vim'

" Manage marks
Plugin 'kshenoy/vim-signature'

" Surround actions
Plugin 'tpope/vim-surround'

" Expand abreviations
Plugin 'mattn/emmet-vim'

" Git support - adds sign infront of the file line indication if the text was
" added/remove/edited
Plugin 'airblade/vim-gitgutter'

" Add Git support in NERDTree
" May be slow sometimes
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Support for GUI color schemes in the non-gui environments
Plugin 'godlygeek/csapprox'

" Highlights and strips the trailing whitespaces
Plugin 'ntpeters/vim-better-whitespace'

" Easy navigate through the current file
Plugin 'easymotion/vim-easymotion'

" Shows the VIM's undo tree (history)
Plugin 'mbbill/undotree'

" Allows method parameters, array elements, etc. to be moved left or right
Plugin 'AndrewRadev/sideways.vim'

" Python IDE-like features
Plugin 'davidhalter/jedi-vim'

" JavaScript IDE-like features
Plugin 'ternjs/tern_for_vim'

" Autocompletion with TAB
Plugin 'ervandew/supertab'

" Angular stuff
Plugin 'burnettk/vim-angular'

" Highlith XML/HTML opening or closing tag
Plugin 'jiangmiao/auto-pairs'

" Perforce integration plugin
Plugin 'nfvs/vim-perforce'

" Dash support
if has("win32")
    " Windows
    Plugin 'KabbAmine/zeavim.vim'
elseif has("unix")
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        " Mac OSX
        Plugin 'rizzatti/dash.vim'
    else
        Plugin 'KabbAmine/zeavim.vim'
    endif
endif

call vundle#end()
filetype plugin indent on

" ==================================
" ===     Configure behavior     ===
" ==================================

syntax on

set synmaxcol=200
set autoindent
set copyindent
set smartindent
set backup
set writebackup
set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab
set incsearch
set hlsearch
set cursorline
set encoding=utf8
set t_Co=256
set fileencoding=utf-8
set wildchar=<Tab>
set wildmenu
set wildmode=list:full
set ignorecase
set smartcase
set smarttab
set ff=unix
set scrolloff=4
set showcmd
set showmode
set hidden
set ruler
set laststatus=2
set undofile
set title
set dir=~/.vim/sessions//
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
set nowrap
set showmatch
set list                                                        " Show invisibles (tabs, line endings etc.)
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:.,extends:❯,precedes:❮ " Choose symbols to show invisibles
set showbreak=↪                                                 " Show line breaks
set lazyredraw                                                  " Don’t refresh while executing a macro
set history=1000                                                " remember more commands and search history
set undolevels=1000                                             " use many muchos levels of undo
set noerrorbells                                                " Don't blink on error
set visualbell t_vb=                                            " Don't beep on error
set relativenumber
set number
set foldcolumn=1                                                " show an additional column for fold indicator
set timeoutlen=500

" Load and Save the configuration file
nnoremap <silent> <Leader>lv :e $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :so $MYVIMRC<CR>

" Toggle folded text
nnoremap <silent> <S-space> za

" Toggle folded text and clear search result highlight
nnoremap <silent> <space> :noh<CR>

" Easier moving to start/end line
nnoremap <leader>a ^
nnoremap <leader>e $
vnoremap <leader>a ^
vnoremap <leader>e $<Left>

" New line
inoremap <S-Enter> <Esc>o
inoremap <C-Enter> <Esc>O

" ==================================
" ===     Configure VIM JS       ===
" ==================================

let g:javascript_enable_domhtmlcss=1
let g:javascript_enable_domhtmlcss = 1
let g:javascript_ignore_javaScriptdoc = 1
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1

autocmd BufEnter *.js set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.ts set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.json set tw=79 sw=3 ts=3 sta et fo=croql

let g:used_javascript_libs = 'angularjs,jquery,requirejs'

" ==================================
" ===   Configure ultisnip       ===
" ==================================

let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" ==================================
" ===             XML            ===
" ==================================

autocmd BufEnter *.xml set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.html set tw=79 sw=4 ts=4 sta et fo=croql

" Close HTML elemente with XHTML rules
let xml_use_xhtml = 1

" ==================================
" ===     Configure Python       ===
" ==================================

autocmd FileType python setlocal completeopt-=preview
autocmd BufEnter *.py set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.sc set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.sc setlocal filetype=python

" Better syntax hightlighting for Python
let python_highlight_all = 1

" ==================================
" ===     Configure Tern JS      ===
" ==================================

autocmd FileType javascript nnoremap <Leader>df :TernDef<CR>
autocmd FileType javascript nnoremap <Leader>dc :TernDef<CR>
autocmd FileType javascript nnoremap <Leader>rf :TernRefs<CR>
autocmd FileType javascript nnoremap <Leader>kk :TernDoc<CR>
autocmd FileType javascript nnoremap <Leader>kb :TernDocBrowse<CR>
autocmd FileType javascript nnoremap <Leader>rn :TernRename<CR>

" ==================================
" ===     Configure Jedi VIM     ===
" ==================================

let g:jedi#goto_command = "<leader>dc"
let g:jedi#goto_assignments_command = "<leader>da"
let g:jedi#goto_definitions_command = "<leader>df"
let g:jedi#documentation_command = "<leader>kk"
let g:jedi#usages_command = "<leader>rf"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>rn"

" ==================================
" ===      Configure CSS         ===
" ==================================

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
autocmd BufNewFile,BufRead *.less set filetype=less
autocmd FileType less set omnifunc=csscomplete#CompleteCSS
autocmd BufEnter *.css set tw=79 sw=4 ts=4 sta et fo=croql
autocmd BufEnter *.scss set tw=79 sw=4 ts=4 sta et fo=croql

if v:version >= 800
    " ==================================
    " ===        Configure ALE       ===
    " ==================================

    let g:ale_open_list=1

    nnoremap <leader>ll :ALEEnable<CR>
    nnoremap <leader>ln :ALENext<CR>
    nnoremap <leader>lp :ALEPrevious<CR>
    nnoremap <leader>lr :ALEDisable<CR>
else
    " ==================================
    " ===     Configure Syntastic    ===
    " ==================================

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_mode_map={ "mode": "passive" }
    let g:sytastic_enable_highlighting=1
    let g:syntastic_javascript_checkers = ['jshint']
    nnoremap <leader>ll :SyntasticCheck<CR>
    nnoremap <leader>ln :lnext<CR>
    nnoremap <leader>lp :lprevious<CR>
    nnoremap <leader>lr :SyntasticReset<CR>
endif

" ==================================
" =  Configure AirLine status bar  =
" ==================================

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme='wombat'

" ==================================
" ===      Set color scheme      ===
" ==================================

set background=dark
colo jellybeans

" ==================================
" ===     Configure NERD tree    ===
" ==================================

nnoremap <silent> <Leader>0 :NERDTreeToggle<CR>
" Close VIM if the only window left is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ==================================
" ===       Configure TagBar     ===
" ==================================

nnoremap <silent> <Leader>9 :TagbarToggle<CR>

" ==================================
" ======    Configure Butane   =====
" ==================================

nnoremap <leader>q :Bclose<CR>

" ==================================
" ===    Configure CtrlP find    ===
" ==================================

let g:ctrlp_map = '<c-p><c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 0
if has("win32")
   set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*
   set wildignore+=*\\node_modules\\*
else
   set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
   set wildignore+=*/node_modules/*
endif

nnoremap <c-p><c-e> :CtrlPBuffer<CR>

" ==================================
" = Configure clipboard management =
" ==================================

" Copy to clipboard
noremap <Leader>y "+y

" Paste from clipboard
noremap <Leader>p "+p
noremap <Leader>P "+P

vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

inoremap <Leader>p <C-r>+
inoremap <Leader>P <C-r>+

" ==================================
" ===          Undotree          ===
" ==================================

nnoremap <Leader>5 :UndotreeToggle<cr>

" ==================================
" ===     Configure behavior     ===
" ==================================

nnoremap <Leader>sl :SidewaysLeft<CR>
nnoremap <Leader>sr :SidewaysRight<CR>

" ==================================
" ===             Dash           ===
" ==================================

if has("win32")
    " Windows
    nnoremap <leader>dd :Zeavim<CR>
    vnoremap <leader>dd :Zeavim<CR>
elseif has("unix")
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        " Mac OSX
        nnoremap <leader>dd :Dash<CR>
    else
        " Linux
        nnoremap <leader>dd :Zeavim<CR>
        vnoremap <leader>dd :Zeavim<CR>
    endif
endif


" ==================================
" ===       Make grep faster     ===
" ==================================

" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " bind K to grep word under cursor
    nnoremap KK :grep "\b<C-R><C-W>\b"<CR>:cw<CR>
endif

" ==================================
" ===      Window navigation     ===
" ==================================

" Scrolling in Insert mode
inoremap <C-E> <C-X><C-E>
inoremap <C-Y> <C-X><C-Y>

" Command mode navigation

" start of line
cnoremap <C-a> <Home>
" end of line
cnoremap <C-e> <End>
" back one character
cnoremap <C-h> <Left>
" forward one character
cnoremap <C-l> <Right>
" delete character under cursor
cnoremap <C-d> <Del>
" recall newer command-line
cnoremap <C-n> <Down>
" recall previous (older) command-line
cnoremap <C-p> <Up>

" Move display lines instead of real lines
nnoremap k  gk
nnoremap gk k
nnoremap j  gj
nnoremap gj j

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Run ctags
nnoremap <silent> <leader>rc :!ctags -R .<CR>

" Toggle the paste option
set pastetoggle=<f5>

nnoremap <leader>ts :tselect <C-r><C-w><CR>

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

cnoremap <up> <nop>
cnoremap <down> <nop>
cnoremap <left> <nop>
cnoremap <right> <nop>

vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>

if has("gui_running")
    " Do stuff related to the GUI only
    nnoremap <f8> :set guifont=*<CR>
endif
